<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爬虫</title>
    <link href="/2022/01/11/%E7%88%AC%E8%99%AB/"/>
    <url>/2022/01/11/%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="相关知识">相关知识</h1><blockquote><p>网页渲染过程</p></blockquote><p>​ 对于异步加载数据的网页（先加载网页框架，数据后续发送请求）</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014202449192.png" alt="image-20211014202449192" style="zoom: 80%;" /></p><blockquote><p>HTTP协议</p></blockquote><ul><li><p>请求</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs python">请求行 -&gt; 请求方式(get/post)、请求url地址、协议<br>请求头 -&gt; 放一些服务器要使用的附加信息(如：请求从哪里来、对返回的数据有什么要求)<br>请求体 -&gt; 放请求的参数<br></code></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li><p>响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">状态行 -&gt; 协议、状态码(<span class="hljs-number">404</span>、<span class="hljs-number">200</span>、<span class="hljs-number">500</span>等)<br>响应头 -&gt; 放一些客户端要使用的附加信息(如：密钥、cookie)<br>响应体 -&gt; 服务器返回给客户端要使用的内容(HTML、json等)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014203754875.png" alt="image-20211014203754875" style="zoom: 80%;" /></p></li><li><p>请求头中常见的一些重要的内容（爬虫需要）：</p><ol type="1"><li>User-Agent：请求载体的身份标识（用什么发送的请求）</li><li>Referer：防盗链（这次请求时从哪个页面来的？反爬虫会用到）</li><li>cookie：本地字符串数据信息（用户登录信息，反爬的token）</li></ol><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014204432009.png" alt="image-20211014204432009" style="zoom: 80%;" /></p></li><li><p>请求方式:</p><ul><li>GET：查询的时候</li><li>POST：修改数据的时候</li></ul></li></ul><h1 id="requests">requests</h1><blockquote><p>安装第三方库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install requests<br></code></pre></td></tr></table></figure><blockquote><p>案例一：搜狗搜索案例</p></blockquote><p>​ ==程序被拦截、GET==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://www.sogou.com/web?query=周杰伦&quot;</span><br><span class="hljs-comment"># 地址栏传参数均为GET请求</span><br>resp = requests.get(url)<br><span class="hljs-built_in">print</span>(resp.text)    <span class="hljs-comment"># 拿到页面源代码</span><br>resp.close()<br></code></pre></td></tr></table></figure><p>​ 此时输出：</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014205909602.png" alt="image-20211014205909602" style="zoom:80%;" /></p><p>​ 因此，需要伪装成浏览器访问，伪装user-agent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>query = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入一个你喜欢的明星：&quot;</span>)<br>url = <span class="hljs-string">f&quot;https://www.sogou.com/web?query=<span class="hljs-subst">&#123;query&#125;</span>&quot;</span><br>dic = &#123;<br>    <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 *****(这部分去浏览器里面复制过来)&quot;</span><br>&#125;<br>resp = requests.get(url, headers=dic)<br><span class="hljs-built_in">print</span>(resp.text)    <span class="hljs-comment"># 拿到页面源代码</span><br>resp.close()<br></code></pre></td></tr></table></figure><blockquote><p>案例二：百度翻译</p></blockquote><p>==POST==</p><p>​ post请求传参数需要通过表单数据</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014211212979.png" alt="image-20211014211212979" style="zoom: 80%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fanyi.baidu.com/sug&quot;</span><br>s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要翻译的英文单词：&quot;</span>)<br>dat = &#123;<br>    <span class="hljs-string">&quot;kw&quot;</span>: s<br>&#125;<br><span class="hljs-comment"># 发送post请求，发送的数据必须放在字典中，通过data参数进行传递</span><br>resp = requests.post(url, data=dat)<br><span class="hljs-built_in">print</span>(resp.json())  <span class="hljs-comment"># 将服务器返回的内容直接处理成json()</span><br>resp.close()<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014220343589.png" alt="image-20211014220343589" style="zoom: 80%;" /></p><blockquote><p>案例三：</p></blockquote><p>​ ==GET请求地址很长，需重新封装参数==</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014220847958.png" alt="image-20211014220847958" style="zoom: 80%;" /></p><p>​ 发现没任何结果，而参数等都没问题，则被反爬了。通过打印user-agent发现不是模拟的浏览器。</p><figure><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014221432711.png" alt="image-20211014221432711" /><figcaption aria-hidden="true">image-20211014221432711</figcaption></figure><figure><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211014221650940.png" alt="image-20211014221650940" /><figcaption aria-hidden="true">image-20211014221650940</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url =<span class="hljs-string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span><br><span class="hljs-comment"># 重新封装参数</span><br>param = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;24&quot;</span>,<br>    <span class="hljs-string">&quot;interval_id&quot;</span>: <span class="hljs-string">&quot;100:90&quot;</span>,<br>    <span class="hljs-string">&quot;action&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;limit&quot;</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-comment"># 修改user-agent</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.47&#x27;</span>, <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span>, <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>, <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span><br>&#125;<br>resp = requests.get(url=url, params=param, headers=headers)<br><span class="hljs-built_in">print</span>(resp.json())<br>resp.close()<br></code></pre></td></tr></table></figure><h1 id="数据解析">数据解析</h1><p>​ 大多数情况下，我们并不需要整个网页的内容，而只需要一小部分内容（某个标签内的内容）。</p><p>​ 数据解析的三种方式：</p><ol type="1"><li><p>re解析</p></li><li><p>bs4解析</p></li><li><p>xpath解析</p><p>这三种方式可以混合使用，以结果做导向。只要能拿到想要的数据，用什么方式不重要。掌握之后再考虑性能的问题。</p></li></ol><h2 id="re模块">re模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br></code></pre></td></tr></table></figure><ul><li><p>findall()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># findall: 匹配字符串中所有的符合正则的内容。</span><br><span class="hljs-comment"># 由于网页中内容很多，所以返回list效率低</span><br><span class="hljs-comment"># 字符串前加r：表示一个普通的字符串，去掉反斜杠的转义机制</span><br>lst = re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>, <span class="hljs-string">&quot;我的电话号码是：10086，他的电话号码是：10010&quot;</span>)<br><span class="hljs-built_in">print</span>(lst)<br><br><span class="hljs-comment"># 输出结果</span><br>[<span class="hljs-string">&#x27;10086&#x27;</span>, <span class="hljs-string">&#x27;10010&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>finditer()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># finditer: 匹配字符串中所有的内容（返回的是迭代器），从迭代器中拿内容需要.group()</span><br>it = re.finditer(<span class="hljs-string">r&quot;\d+&quot;</span>, <span class="hljs-string">&quot;我的电话号码是：10086，他的电话号码是：10010&quot;</span>)<br><span class="hljs-built_in">print</span>(it)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> it:<br>    <span class="hljs-built_in">print</span>(i.group())<br>    <br><span class="hljs-comment"># 输出结果</span><br>&lt;callable_iterator <span class="hljs-built_in">object</span> at <span class="hljs-number">0x0000020CDAB925B0</span>&gt;<br><span class="hljs-number">10086</span><br><span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure></li><li><p>search()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># search返回的是match对象，拿数据需要.group()</span><br>s = re.search(<span class="hljs-string">r&quot;\d+&quot;</span>, <span class="hljs-string">&quot;我的电话号码是：10086，他的电话号码是：10010&quot;</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s.group())<br><br><span class="hljs-comment"># 输出结果，特点：找到结果就返回</span><br>&lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">8</span>, <span class="hljs-number">13</span>), match=<span class="hljs-string">&#x27;10086&#x27;</span>&gt;<br><span class="hljs-number">10086</span><br></code></pre></td></tr></table></figure></li><li><p>match()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># match是从头开始匹配</span><br>s = re.match(<span class="hljs-string">r&quot;\d+&quot;</span>, <span class="hljs-string">&quot;10086，他的电话号码是：10010&quot;</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(s.group())<br><br><span class="hljs-comment"># 输出结果</span><br>&lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>), match=<span class="hljs-string">&#x27;10086&#x27;</span>&gt;<br><span class="hljs-number">10086</span><br></code></pre></td></tr></table></figure></li><li><p>预加载正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 预加载正则表达式，在表达式很长的时候可以提高一点效率；并且可以反复使用。</span><br>obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;\d+&quot;</span>)<br>obj.match(<span class="hljs-string">&quot;10086，他的电话号码是：10010&quot;</span>)<br><span class="hljs-built_in">print</span>(s.group())<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-number">10086</span><br></code></pre></td></tr></table></figure></li><li><p>正则中的内如何单独提取？</p><p>单独获取到正则中的具体内容可以给分组起名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&#x27;xiyouji&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;孙悟空&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class=&#x27;shuihuzhuan&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;武松&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class=&#x27;sanguoyanyi&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;诸葛亮&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class=&#x27;hongloumeng&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;贾宝玉&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># re.S 能让.匹配换行符</span><br><span class="hljs-comment"># (?P&lt;分组名称&gt;正则表达式) 可单独从正则匹配的内容中进一步提取内容</span><br><span class="hljs-comment"># (?P&lt;name&gt;.*?)将.*?匹配到的内容放到一个名称为name的组中，可通过组名name取到其中的值</span><br>obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&#x27;(?P&lt;id&gt;\d+)&#x27;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)<br>result = obj.finditer(s)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(it.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&quot;</span> + it.group(<span class="hljs-string">&quot;id&quot;</span>) + <span class="hljs-string">&quot;行的内容是：&quot;</span> + it.group(<span class="hljs-string">&quot;name&quot;</span>))<br>    <br>    <br><span class="hljs-comment"># 输出结果</span><br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&#x27;<span class="hljs-title">xiyouji</span>&#x27;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">id</span>=&#x27;1&#x27;&gt;孙悟空&lt;/<span class="hljs-title">span</span>&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">第1行的内容是：孙悟空</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&#x27;<span class="hljs-title">shuihuzhuan</span>&#x27;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">id</span>=&#x27;2&#x27;&gt;武松&lt;/<span class="hljs-title">span</span>&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">第2行的内容是：武松</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&#x27;<span class="hljs-title">sanguoyanyi</span>&#x27;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">id</span>=&#x27;3&#x27;&gt;诸葛亮&lt;/<span class="hljs-title">span</span>&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">第3行的内容是：诸葛亮</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&#x27;<span class="hljs-title">hongloumeng</span>&#x27;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">id</span>=&#x27;4&#x27;&gt;贾宝玉&lt;/<span class="hljs-title">span</span>&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">第4行的内容是：贾宝玉</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="案例豆瓣排行榜">案例:豆瓣排行榜</h3><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016141911900.png" alt="image-20211016141911900" style="zoom:50%;" /></p><ul><li><p>分析</p><p>通过查找发现，排名信息以及在源码里面了，所以直接通过正则表达式从源代码里面抓取数据即可。</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016142058441.png" alt="image-20211016142058441" style="zoom: 80%;" /></p></li><li><p>操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br><br>url = <span class="hljs-string">&quot;https://movie.douban.com/top250&quot;</span><br>resp = requests.get(url)<br>headers = &#123;<br>    <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50&quot;</span><br>&#125;<br>resp = requests.get(url, headers=headers)<br>page_content = resp.text<br><br><span class="hljs-comment"># 解析数据</span><br>obj = re.<span class="hljs-built_in">compile</span>(<br>    <span class="hljs-string">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?&#x27;</span><br>    <span class="hljs-string">r&#x27;&lt;p class=&quot;&quot;&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&lt;/p&gt;.*?&lt;span class=&quot;rating_num&quot; &#x27;</span><br>    <span class="hljs-string">r&#x27;property=&quot;v:average&quot;&gt;(?P&lt;star&gt;.*?)&lt;/span&gt;.*?&lt;span&gt;(?P&lt;number&gt;.*?)人评价&#x27;</span>,<br>    re.S)<br><br><span class="hljs-comment"># 开始匹配</span><br>result = obj.finditer(page_content)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.csv&quot;</span>, mode=<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>csvwriter = csv.writer(f)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-comment"># 将数据放到字典中，再写入文件</span><br>    dic = it.groupdict()<br>    dic[<span class="hljs-string">&#x27;year&#x27;</span>] = dic[<span class="hljs-string">&#x27;year&#x27;</span>].strip()<br>    csvwriter.writerow(dic.values())<br>f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---------over-------&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016154436370.png" alt="image-20211016154436370" style="zoom: 80%;" /></p></li><li><p>注意</p><ol type="1"><li>如果出现下图所示问题，说明网站有一些加密措施，只需加个 <code>verify=False</code> 即可。</li></ol><figure><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016155342044.png" alt="image-20211016155342044" /><figcaption aria-hidden="true">image-20211016155342044</figcaption></figure><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016155447642.png" alt="image-20211016155447642" style="zoom:80%;" /></p><ol start="2" type="1"><li><p>如果出现乱码，可以看看 <code>meta</code> 标签中的编码格式。</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016155634251.png" alt="image-20211016155634251" style="zoom:80%;" /></p></li></ol></li></ul><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211016155715906.png" alt="image-20211016155715906" style="zoom:80%;" /></p><h2 id="bs4解析">Bs4解析</h2><p><code>Beautiful Soup 4</code></p><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install bs4<br></code></pre></td></tr></table></figure></li><li><p>案例一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> csv<br><br>url = <span class="hljs-string">&quot;http://www.xinfadi.com.cn/index.html&quot;</span><br>resp = requests.get(url)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;新闻.csv&quot;</span>, mode=<span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>csvwriter = csv.writer(f)<br><br><span class="hljs-comment"># 解析数据</span><br><span class="hljs-comment"># 把页面源代码交给BeautifulSoup进行除了，生成bs对象</span><br>page = BeautifulSoup(resp.text, <span class="hljs-string">&quot;html.parser&quot;</span>)  <span class="hljs-comment"># 第二个参数指定解析的是html</span><br><span class="hljs-comment"># 从bs对象中查找数据    1.find(标签,属性=...)  2.find_all(标签,属性=...)</span><br><span class="hljs-comment"># 找 class=news 并且 id=news 的 div</span><br>div = page.find(<span class="hljs-string">&quot;div&quot;</span>, attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;news&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;news&quot;</span>&#125;)<br>news = div.find_all(<span class="hljs-string">&quot;span&quot;</span>)<br><span class="hljs-keyword">for</span> new <span class="hljs-keyword">in</span> news:<br>    <span class="hljs-comment"># 拿到span标签内的内容，写入文件</span><br>    csvwriter.writerow(new.text)<br>    <span class="hljs-built_in">print</span>(new.text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---over---&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>案例二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 拿到主页面的源代码，然后提取到子页面的链接地址</span><br>url = <span class="hljs-string">&quot;https://www.umei.cc/meinvtupian/&quot;</span><br>resp = requests.get(url)<br>resp.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br><br>page = BeautifulSoup(resp.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>a = page.find(<span class="hljs-string">&quot;div&quot;</span>, attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;TypeList&quot;</span>&#125;).find_all(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    href = <span class="hljs-string">&quot;https://www.umei.cc&quot;</span> + i.get(<span class="hljs-string">&quot;href&quot;</span>)<br>    <span class="hljs-comment"># 通过href拿到子页面的内容，从子页面中找到图片的下载地址</span><br>    child_page_resp = requests.get(href)<br>    child_page_resp.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>    child_page_text = child_page_resp.text<br>    child_page = BeautifulSoup(child_page_text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>    imgs = child_page.find(<span class="hljs-string">&quot;div&quot;</span>, attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;relax-arc&quot;</span>&#125;).find_all(<span class="hljs-string">&quot;img&quot;</span>)<br>    <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs:<br>        src = img.get(<span class="hljs-string">&quot;src&quot;</span>)<br>        title = img.get(<span class="hljs-string">&quot;title&quot;</span>)<br>        <span class="hljs-comment"># 下载图片</span><br>        img_resp = requests.get(src)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imgs/&quot;</span> + title + <span class="hljs-string">&quot;.png&quot;</span>, mode=<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(img_resp.content)   <span class="hljs-comment"># 图片内容写入文件，这里拿到的是字节</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--over---&quot;</span>, title)<br>        time.sleep(<span class="hljs-number">1</span>)   <span class="hljs-comment"># 防止频繁访问被服务器干掉，下一张图片后休息一下</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====all over====&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2022/01/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/01/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><code>Regular Expression</code> 正则表达式，使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"）。<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p><span id="more"></span><h1 id="元字符具有固定含义的特殊符号">元字符：具有固定含义的特殊符号</h1><p>常用的元字符：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs python">.匹配除换行符以外的任意字符<br>\w匹配字母或数字或下划线<br>\s匹配任意的空白符<br>\d匹配数字<br>\n匹配一个换行符<br>\t匹配一个制表符<br><br>^匹配字符串的开始<br>$匹配字符串的结尾<br>\W匹配非字母或数字或下划线<br>\D匹配非数字<br>\S匹配非空白符<br>a|b匹配字符a或字符b<br>()匹配括号内的表达式，也表示一个组<br>[...]匹配字符组中的字符<br>[^...]匹配除了字符组中字符的所有字符<br></code></pre></td></tr></table></figure><h1 id="量词控制前面的元字符出现的次数">量词：控制前面的元字符出现的次数</h1><ul><li>常用的量词：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">*重复零次或更多次<br>+重复一次或更多次<br>?重复零次或一次<br>&#123;n&#125;重复n次<br>&#123;n,&#125;重复n次或更多次<br>&#123;n,m&#125;重复n到m次<br></code></pre></td></tr></table></figure><ul><li>贪婪匹配和惰性匹配：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">.*贪婪匹配<br>.*?惰性匹配<br></code></pre></td></tr></table></figure><blockquote><p>.* 是尽可能多的匹配</p></blockquote><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211015102316420.png" alt="image-20211015102316420" style="zoom: 80%;" /></p><blockquote><p>.*? 是让*号尽可能少的去匹配</p></blockquote><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211015102249569.png" alt="image-20211015102249569" style="zoom: 80%;" /></p><ul><li><p>案例</p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211015103541714.png" alt="image-20211015103541714" style="zoom: 80%;" /></p></li><li><p>常用的匹配可用工具直接生成</p><p><a href="https://tool.oschina.net/regex/">在线正则表达式测试 (oschina.net)</a></p><p><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20211015103813206.png" alt="image-20211015103813206" style="zoom:50%;" /></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>通用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客写作笔记</title>
    <link href="/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="front-matter">Front-matter</h1><h2 id="摘要">摘要</h2><p>默认开启了自动摘要，若要手动指定摘要，使用 <code>&lt;!-- more --&gt;</code> MD文档里划分，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">正文的一部分作为摘要<br>&lt;!-- more --&gt;<br>余下的正文<br></code></pre></td></tr></table></figure><p>或者在 <code>Front-matter</code> 里设置 <code>excerpt</code> 字段，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong></p><p>无论哪种摘要都最多显示3行！</p></blockquote><h2 id="隐藏文章">隐藏文章</h2><p>如果想把某些文章隐藏起来，不在首页和其他分类里展示，可以在文章开头 <code>Front-matter</code> 中配置 <code>hide: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong></p><p>隐藏会使文章在分类和标签类里都不显示</p><p>隐藏后依然可以通过文章链接访问</p></blockquote><h2 id="文章排序置顶">文章排序（置顶）</h2><p>如果想手动将某些文章固定在首页靠前的位置，可以在安装 <code>hexo-generator-index</code> &gt;= 2.0.0 版本的情况下，在文章开头 <code>Front-matter</code> 中配置 <code>sticky</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p><code>sticky</code> 数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</p><p>当文章设置了 <code>sticky</code> 后，主题会默认在首页文章标题前增加一个图标，来标识这是一个置顶文章，你可以通过<strong>主题配置</strong>去关闭或修改这个功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-top&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="latex数学公式">LaTeX数学公式</h2><p>为了提高不包含公式页面的加载速度，因此，在需要使用 <code>LaTeX</code> 语法的数学公式时，在文章 Front-matter 里指定 <code>mermaid: true</code> 。</p><h1 id="文章">文章</h1><h2 id="首页封面图">首页封面图</h2><p>对于单篇文章，在文章开头 <code>Front-matter</code> 中配置 <code>index_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h2 id="顶部大图">顶部大图</h2><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <code>Front-matter</code> 中指定 <code>banner_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h2 id="评论">评论</h2><p>如果想在某个文章页关闭评论，或者想在某个自定义页面开启评论，可以通过在 <code>Front-matter</code> 设置 <code>comment: bool</code> 来控制评论开关，或者通过 <code>comment: 'type'</code> 来开启指定的评论插件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于页</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">comment:</span> <span class="hljs-string">&#x27;valine&#x27;</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是正文内容</span><br></code></pre></td></tr></table></figure><h2 id="脚注">脚注</h2><p>脚注语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这是一句话！！！">[1]</span></a></sup><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br></code></pre></td></tr></table></figure><p>更优雅的使用方式，是将脚注写在文末，比如：（效果在本文最后）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure><h2 id="tag插件">Tag插件</h2><h3 id="便签">便签</h3><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><blockquote><p><strong>WARNING</strong></p><p>使用时 <code>&#123;% note primary %&#125;` 和 `&#123;% endnote %&#125;</code> 需单独一行，否则会出现问题</p></blockquote><h3 id="行内标签">行内标签</h3><p>在 markdown 中加入如下的代码来使用 Label：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选 Label：</p><p><span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span> <span class="label label-success">success</span> <span class="label label-danger">danger</span></p><h3 id="按钮">按钮</h3><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：跳转链接 text：显示的文字 title：鼠标悬停时显示的文字（可选）</p><p><a class="btn" href="#" title="title">text</a></p><h2 id="参考脚注效果">参考（脚注效果）</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是一句话！！！ <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>嗯？看懂了吗？ <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>通用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装</title>
    <link href="/2022/01/11/Docker/"/>
    <url>/2022/01/11/Docker/</url>
    
    <content type="html"><![CDATA[<p>环境：CentOS 7</p><ol type="1"><li><p>先卸载原有的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>               docker-latest-logrotate \<br>                  docker-logrotate \<br>               docker-engine<br></code></pre></td></tr></table></figure></li><li><p>通过仓库安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install -y yum-utils<br></code></pre></td></tr></table></figure><span id="more"></span></li><li><p>设置阿里云镜像的仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum-config-manager \<br>    --add-repo \<br>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>更新软件包索引</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum makecache fast<br></code></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>验证1（查看版本）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker version<br></code></pre></td></tr></table></figure><figure><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20210801112723327.png" alt="image-20210801112723327" /><figcaption aria-hidden="true">image-20210801112723327</figcaption></figure></li><li><p>验证2（测试hello-world）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker run hello-world<br></code></pre></td></tr></table></figure><figure><img src="https://gitee.com/zengyuqin/drawing-bed/raw/master/img/image-20210801112901242.png" alt="image-20210801112901242" /><figcaption aria-hidden="true">image-20210801112901242</figcaption></figure></li></ol><p>了解：</p><ol type="1"><li><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure></li><li><p>卸载docker</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1、卸载依赖</span><br>sudo yum remove docker-ce docker-ce-cli containerd.io<br><span class="hljs-comment"># 2、删除资源</span><br>sudo rm -rf /var/lib/docker<br>sudo rm -rf /var/lib/containerd<br></code></pre></td></tr></table></figure></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/11</title>
    <link href="/2021/12/11/%E5%89%91%E6%8C%87%20Offer%20II%20006%20%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/12/11/%E5%89%91%E6%8C%87%20Offer%20II%20006%20%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题目318.排序数组中两个数字之和">题目：318.排序数组中两个数字之和</h1><p><a href="https://leetcode-cn.com/problems/kLl5u1/">剑指 Offer II 006. 排序数组中两个数字之和</a> <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">与主站167题相似</a></p><p><strong>难度：</strong><label style="color:green">简单</label></p><p>给定一个已按照 升序排列 的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 0 开始计数 ，所以答案数组应当满足 $0 &lt;= answer[0] &lt; answer[1] &lt; numbers.length $。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><span id="more"></span><p><strong>示例 1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">numbers</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>], <span class="hljs-attr">target</span> = <span class="hljs-number">8</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>解释：<span class="hljs-number">2</span> 与 <span class="hljs-number">6</span> 之和等于目标数 <span class="hljs-number">8</span> 。因此 <span class="hljs-attr">index1</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">index2</span> = <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：numbers = <span class="hljs-comment">[2,3,4]</span>, target = 6<br>输出：<span class="hljs-comment">[0,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：numbers = <span class="hljs-comment">[-1,0]</span>, target = -1<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><span class="math inline">\(2&lt;=numbers.length&lt;=3*10^4\)</span></li><li><span class="math inline">\(-1000&lt;=numbers[i]&lt;=1000\)</span></li><li><span class="math inline">\(numbers\)</span>按 <strong>递增顺序</strong> 排序</li><li><span class="math inline">\(-1000&lt;=target&lt;=1000\)</span></li><li>仅存在一个有效答案</li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/kLl5u1 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><p>双指针。</p><p>目前为止做过最简单题......</p></blockquote><h1 id="代码">代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; numbers, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> second = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ret;<br>        <span class="hljs-keyword">while</span> (first &lt; second) &#123;<br>            <span class="hljs-keyword">if</span> (numbers[first] + numbers[second] &gt; target) &#123;<br>                second--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numbers[first] + numbers[second] &lt; target) &#123;<br>                first++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ret.<span class="hljs-built_in">push_back</span>(first);<br>                ret.<span class="hljs-built_in">push_back</span>(second);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
      <tag>简单</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/9</title>
    <link href="/2021/12/09/%E5%89%91%E6%8C%87%20Offer%20II%20005%20%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"/>
    <url>/2021/12/09/%E5%89%91%E6%8C%87%20Offer%20II%20005%20%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="题目318.单词长度的最大乘积">题目：318.单词长度的最大乘积</h1><p><a href="https://leetcode-cn.com/problems/aseY1I/">剑指 Offer II 005. 单词长度的最大乘积</a> <a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/">与主站318题相同</a></p><p><strong>难度：</strong><label style="color:orange">中等</label></p><p>给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p><span id="more"></span><p><strong>示例 1:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">输入: <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;abcw&quot;</span>,<span class="hljs-string">&quot;baz&quot;</span>,<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>,<span class="hljs-string">&quot;fxyz&quot;</span>,<span class="hljs-string">&quot;abcdef&quot;</span>]<br>输出: <span class="hljs-number">16</span> <br>解释: 这两个单词为 <span class="hljs-string">&quot;abcw&quot;</span>, <span class="hljs-string">&quot;fxyz&quot;</span>。它们不包含相同字符，且长度的乘积最大。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入: <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;bcd&quot;</span>,<span class="hljs-string">&quot;abcd&quot;</span>]<br>输出: <span class="hljs-number">4</span> <br>解释: 这两个单词为 <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;cd&quot;</span>。<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入: <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>]<br>输出: <span class="hljs-number">0</span> <br>解释: 不存在这样的两个单词。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><span class="math inline">\(2&lt;=words.length&lt;=1000\)</span></li><li><span class="math inline">\(1&lt;=words[i].length&lt;=1000\)</span></li><li><span class="math inline">\(words[i]\)</span>仅包含小写字母</li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/aseY1I 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><p><strong>方法一：</strong>（最笨的方法，且会超时）</p><p>时间复杂度：<span class="math inline">\(O(n^2 * m^2)\)</span>，<span class="math inline">\(n\)</span>为数组长度，<span class="math inline">\(m\)</span>为字符串的平均长度。</p><p>该暴力求解的方法提交后会超时。嵌套两个<span class="math inline">\(for\)</span>循环进行字符串两两比较，在比较时再对两个字符串中的字符进行逐个比较，比较时调用了<span class="math inline">\(find()\)</span>函数。因此，相当于有了四层嵌套循环，时间复杂度很高。</p></blockquote><blockquote><p><strong>方法二：</strong>（哈希表）</p><p>对于每个字符串，可以用一个哈希表记录出现在该字符串中的所有字符。在判断两个字符串 <span class="math inline">\(str1\)</span> 和 <span class="math inline">\(str2\)</span> 中是否有相同的字符时，只需要从 'a' 到 'z' 判断某个字符是否在两个字符串对应的哈希表中都出现了。在哈希表中查找的时间复杂度是 <span class="math inline">\(O(1)\)</span>。</p></blockquote><blockquote><p><strong>方法三：</strong></p><p>时间复杂度：若数组 words 的长度为 n，平均每个字符串的长度为 k，那么时间复杂度为 <span class="math inline">\(O(nk + n^2)\)</span>。</p><ol type="1"><li>用一个数字二进制表示中的每一位记录一个字母是否出现，例如，字符串 <span class="math inline">\(ac\)</span> 可以用 <span class="math inline">\(00000000 00000000 00000000 00000101 = 3\)</span> 表示；</li><li>将每一个字符串中字母是否出现均用一个数字表示表示出来，当比较两个字符串是否存在相同字母时，使用 <span class="math inline">\(num1 \&amp; num2 == 0\)</span> 就可以轻易判断出来了。</li></ol></blockquote><blockquote><p><label style="color:Sienna">要深刻理解各种位运算的特点才能灵活地运用位运算来解决问题！！！</label></p></blockquote><h1 id="代码">代码</h1><p><strong>方法一：</strong>（力扣中会超时）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; words.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">has_same_letter</span>(words[i], words[j])) &#123;<br>                    tmp = words[i].<span class="hljs-built_in">size</span>() * words[j].<span class="hljs-built_in">size</span>();<br>                    <span class="hljs-keyword">if</span> (tmp &gt; ret)<br>                        ret = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">has_same_letter</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; a, <span class="hljs-keyword">const</span> string&amp; b)</span> </span>&#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>(), a[i]);<br>            <span class="hljs-keyword">if</span> (it != b.<span class="hljs-built_in">end</span>()) &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; words_num;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; words[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br>                tmp |= <span class="hljs-number">1</span> &lt;&lt; (words[i][j] - <span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br>            words_num.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; words.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (!(words_num[i] &amp; words_num[j])) &#123;<br>                    <span class="hljs-keyword">int</span> tmp = words[i].<span class="hljs-built_in">size</span>() * words[j].<span class="hljs-built_in">size</span>();<br>                    <span class="hljs-keyword">if</span> (tmp &gt; ret) &#123;<br>                        ret = tmp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法三：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; words_num;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; words[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br>                tmp |= <span class="hljs-number">1</span> &lt;&lt; (words[i][j] - <span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br>            words_num.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; words.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (!(words_num[i] &amp; words_num[j])) &#123;<br>                    <span class="hljs-keyword">int</span> tmp = words[i].<span class="hljs-built_in">size</span>() * words[j].<span class="hljs-built_in">size</span>();<br>                    <span class="hljs-keyword">if</span> (tmp &gt; ret) &#123;<br>                        ret = tmp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>整数</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
      <tag>中等</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/8</title>
    <link href="/2021/12/08/%E5%89%91%E6%8C%87%20Offer%20II%20004%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2021/12/08/%E5%89%91%E6%8C%87%20Offer%20II%20004%20%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="题目137.只出现一次的数字">题目：137.只出现一次的数字</h1><p><a href="https://leetcode-cn.com/problems/WGki4K/">剑指 Offer II 004. 只出现一次的数字</a> <a href="https://leetcode-cn.com/problems/single-number-ii/">与主站137题相同</a></p><p><strong>难度：</strong><label style="color:orange">中等</label></p><p>给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。</p><span id="more"></span><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">2,2,3,2</span>]<br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,1,0,1</span>,<span class="hljs-number">0,1,100</span>]<br>输出：<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><span class="math inline">\(1&lt;=nums.length&lt;=3*10^4\)</span></li><li><span class="math inline">\(-2^{31}&lt;=nums[i]&lt;=2^{31}-1\)</span></li><li><span class="math inline">\(nums\)</span>中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次</li></ul><p><strong>进阶：</strong></p><ul><li>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/WGki4K 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><p><strong>方法一：</strong>（最笨的方法）</p><p>时间复杂度：<span class="math inline">\(O(nlogn)\)</span></p><ol type="1"><li>将数组从小到大排序；</li><li>从左到右顺序寻找。</li></ol></blockquote><blockquote><p><strong>方法二：</strong></p><p>时间复杂度：<span class="math inline">\(O(n)\)</span></p><p>分析：相同的3个数字异或的结果是数字本身，但将数组中所有数字进行异或并不能消除出现3次的数字，因此需要想其他办法。</p><p>解决：一个整数是由32个 0 或 1 组成的。可以将数组中所有数字同一位置的数位相加，若第 i 个数位相加后和能被3整除，则说明只出现一次的数字的第 i 位为0，若不能整除则第 i 位为1。得到只出现一次的数字的二进制形式即可得到它的十进制值，求十进制详细方式见代码。</p></blockquote><blockquote><p><strong>知识点：</strong></p><ol type="1"><li><p><code>std::sort</code> 采用的是快速排序，时间复杂度是 <span class="math inline">\(O(nlogn)\)</span>。</p></li><li><p>任何一个数异或它自己的结果都是0。</p></li><li><p>相同的3个数字异或的结果是数字本身。</p></li></ol></blockquote><h1 id="代码">代码</h1><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> nums[nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br><br>            <span class="hljs-keyword">if</span> (nums[i] == nums[i + <span class="hljs-number">2</span>])<br>                i += <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>* ret_bit = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">32</span>]();<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; j++)<br>                ret_bit[j] += (nums[i] &gt;&gt; (<span class="hljs-number">31</span> - j) &amp; <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>            ret = (ret &lt;&lt; <span class="hljs-number">1</span>) + ret_bit[i] % <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">delete</span>[]ret_bit;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>整数</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
      <tag>中等</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/7</title>
    <link href="/2021/12/07/%E5%89%91%E6%8C%87%20Offer%20II%20003%20%E5%89%8D%20n%20%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2021/12/07/%E5%89%91%E6%8C%87%20Offer%20II%20003%20%E5%89%8D%20n%20%E4%B8%AA%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题目338.前-n-个数字二进制中-1-的个数">题目：338.前 n 个数字二进制中 1 的个数</h1><p><a href="https://leetcode-cn.com/problems/w3tCBm/">剑指 Offer II 003. 前 n 个数字二进制中 1 的个数</a> <a href="https://leetcode-cn.com/problems/counting-bits/">与主站338题相同</a></p><p><strong>难度：</strong><label style="color:green">简单</label></p><p>给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><span id="more"></span><p><strong>示例 1:</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">输入: n = <span class="hljs-number">2</span><br>输出: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>解释: <br><span class="hljs-number">0</span> <span class="hljs-comment">--&gt; 0</span><br><span class="hljs-number">1</span> <span class="hljs-comment">--&gt; 1</span><br><span class="hljs-number">2</span> <span class="hljs-comment">--&gt; 10</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">输入: n = <span class="hljs-number">5</span><br>输出: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>解释:<br><span class="hljs-number">0</span> <span class="hljs-comment">--&gt; 0</span><br><span class="hljs-number">1</span> <span class="hljs-comment">--&gt; 1</span><br><span class="hljs-number">2</span> <span class="hljs-comment">--&gt; 10</span><br><span class="hljs-number">3</span> <span class="hljs-comment">--&gt; 11</span><br><span class="hljs-number">4</span> <span class="hljs-comment">--&gt; 100</span><br><span class="hljs-number">5</span> <span class="hljs-comment">--&gt; 101</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><span class="math inline">\(1&lt;=n&lt;=10^5\)</span></li></ul><p><strong>进阶：</strong></p><ul><li>给出时间复杂度为 <span class="math inline">\(O(n*sizeof(integer))\)</span> 的解答非常容易。但你可以在线性时间 <span class="math inline">\(O(n)\)</span> 内用一趟扫描做到吗？</li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/w3tCBm 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><p><strong>方法一：</strong></p><p>时间复杂度： <span class="math inline">\(O(n*sizeof(integer))\)</span></p><p>最容易想到的方式，遍历每个数，采用<strong>右移</strong>逐个求出1的个数。</p><p><strong>求一个整数的二进制形式：</strong></p><p>若一个数是奇数，那么这个数二进制形式的最后一位一定为1。通过这个规则，不断对该整数进行右移（除以2）操作，若每右移一次得到的结果为一个奇数，则该结果二进制形式中最后一位为1。由此可以得到二进制形式。</p></blockquote><blockquote><p><strong>方法二：</strong><label style="color:blue">Brian Kernighan（布莱恩·柯林汉) 算法</label></p><p><label style="color:red">后面需要重做</label></p><p>时间复杂度：<span class="math inline">\(O(n logn)\)</span></p><p>对于任意整数 <span class="math inline">\(x\)</span>，令 $ x=x&amp;(x-1)$，该运算将 <span class="math inline">\(x\)</span> 的二进制表示的最后一个 1 变成 0。因此，对 <span class="math inline">\(x\)</span> 重复该操作，直到 <span class="math inline">\(x\)</span> 变成 0，则操作次数即为 <span class="math inline">\(x\)</span> 的“一比特数”。</p></blockquote><blockquote><p><strong>方法三：</strong>动态规划</p><p><label style="color:red">后面需要重做</label></p><p>时间复杂度：<span class="math inline">\(O(n)\)</span></p><p>由方法二可发现，整数 <span class="math inline">\(i\)</span> 的二进制形式中 1 的个数比 <span class="math inline">\(i\&amp;(i-1)\)</span> 的二进制形式中 1 的个数多 1，可根据这个规律采用动态规划来做。</p></blockquote><blockquote><p><strong>薄弱知识点：</strong></p><p>位运算比除法运算和求余运算更高效，因此，可用 <span class="math inline">\(i&gt;&gt;1\)</span>代替 <span class="math inline">\(i/2\)</span>，可用 <span class="math inline">\(i\&amp;1\)</span> 计算 <span class="math inline">\(i\%2\)</span>。</p></blockquote><h1 id="代码">代码</h1><p><strong>方法一：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">countBits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; tmp;<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <br>            tmp.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>                tmp.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">counter</span>(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br><br>    <span class="hljs-comment">//计算number对于二进制中1的个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">counter</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; number)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tmp = number;<br>        <br>        <span class="hljs-keyword">if</span> (number % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>            num++;<br><br>        tmp = tmp &gt;&gt; <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-number">0</span>) <br>        &#123;<br>            <span class="hljs-keyword">if</span> (tmp % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>                num++;<br>            tmp = tmp &gt;&gt; <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>整数</tag>
      
      <tag>C++</tag>
      
      <tag>简单</tag>
      
      <tag>位运算</tag>
      
      <tag>需要重做</tag>
      
      <tag>动态规划</tag>
      
      <tag>布莱恩·柯林汉算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/7</title>
    <link href="/2021/12/07/%E5%89%91%E6%8C%87%20Offer%20II%20002%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/"/>
    <url>/2021/12/07/%E5%89%91%E6%8C%87%20Offer%20II%20002%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="题目67.二进制加法">题目：67.二进制加法</h1><p><a href="https://leetcode-cn.com/problems/JFETK5/">剑指 Offer II 002. 二进制加法</a> <a href="https://leetcode-cn.com/problems/add-binary/">与主站67题相同</a></p><p><strong>难度：</strong><label style="color:green">简单</label></p><p>给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p><span id="more"></span><p><strong>示例 1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">a</span> = <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-attr">b</span> = <span class="hljs-string">&quot;10&quot;</span><br>输出: <span class="hljs-string">&quot;101&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">a</span> = <span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-attr">b</span> = <span class="hljs-string">&quot;1011&quot;</span><br>输出: <span class="hljs-string">&quot;10101&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个字符串仅由字符 '0' 或 '1' 组成。</li><li><span class="math inline">\(1&lt;=a.length, b.length&lt;=10^4\)</span></li><li>字符串如果不是 "0" ，就都不含前导零。</li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/JFETK5 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><p><strong>参考十进制加法：</strong></p><ol type="1"><li>将两个二进制数右端对齐；</li><li>从字符串右端开始，从右向左做加法；</li><li>逢二进一；</li><li>时间复杂度为<span class="math inline">\(O(max(len_a, len_b))\)</span>。</li></ol></blockquote><blockquote><p><strong>心得：</strong></p><ol type="1"><li><p>力扣题解分析了另一种不可行的思路，我在写时没有考虑到这方面：</p><p>将两个二进制数分别转换为十进制数，相加后再转换为二进制数，即可得到答案。</p><p>但该方法的不足：①题目二进制字符串的长度过长，两数相加时可能会溢出；②时间复杂度为<span class="math inline">\(O(len_a + len_b)\)</span>。</p></li></ol></blockquote><h1 id="代码">代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">addBinary</span><span class="hljs-params">(string a, string b)</span> </span>&#123;<br>        <span class="hljs-comment">//向右对齐，位数少的左边补0</span><br>        <span class="hljs-keyword">int</span> len_a = a.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">int</span> len_b = b.<span class="hljs-built_in">length</span>();<br>        deque&lt;<span class="hljs-keyword">char</span>&gt; ret_deque;<br>        string ret_str;<br>        <span class="hljs-keyword">if</span> (len_a &lt; len_b)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len_b - len_a; i++)<br>                a = <span class="hljs-string">&#x27;0&#x27;</span> + a;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len_a &gt; len_b)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len_a - len_b; i++)<br>                b = <span class="hljs-string">&#x27;0&#x27;</span> + b;<br>        &#125;<br><br>        <span class="hljs-keyword">char</span> carry_bit = <span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-comment">//记录向前的进位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((a[i] == <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; b[i] == <span class="hljs-string">&#x27;0&#x27;</span>) || (a[i] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; b[i] == <span class="hljs-string">&#x27;1&#x27;</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (carry_bit == <span class="hljs-string">&#x27;1&#x27;</span>) <br>                &#123;<br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    carry_bit = <span class="hljs-string">&#x27;1&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>                    carry_bit = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>                <br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; b[i] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (carry_bit == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>                <span class="hljs-keyword">else</span><br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br><br>                carry_bit = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (carry_bit == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>                    carry_bit = <span class="hljs-string">&#x27;1&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    carry_bit = <span class="hljs-string">&#x27;1&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry_bit == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            ret_deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ret_deque.<span class="hljs-built_in">size</span>(); i++)<br>            ret_str += ret_deque[i];<br><br>        <span class="hljs-keyword">return</span> ret_str;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>整数</tag>
      
      <tag>C++</tag>
      
      <tag>简单</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题日记2021/12/6</title>
    <link href="/2021/12/06/%E5%89%91%E6%8C%87%20Offer%20II%20001%20%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/"/>
    <url>/2021/12/06/%E5%89%91%E6%8C%87%20Offer%20II%20001%20%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="题目-29.两数相除">题目： 29.两数相除</h1><p><a href="https://leetcode-cn.com/problems/xoh6Oh/">剑指 Offer II 001. 整数除法</a> <a href="https://leetcode-cn.com/problems/divide-two-integers/">与主站 29 题相同</a></p><p><strong>难度：</strong><label style="color:green">简单</label> <label style="color:red">（后面需要重新做）</label></p><p>给定两个整数 a 和 b ，求它们的除法的商 a/b ，要求不得使用乘号 '*'、除号 '/' 以及求余符号 '%' 。</p><span id="more"></span><p><strong>注意：</strong></p><ul><li>数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [<span class="math inline">\(-2^{31}\)</span>, <span class="math inline">\(2^{31}-1\)</span>]。本题中，如果除法结果溢出，则返回 <span class="math inline">\(2^{31}-1\)</span></li></ul><p><strong>示例1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">a</span> = <span class="hljs-number">15</span>, <span class="hljs-attr">b</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">7</span><br>解释：<span class="hljs-number">15</span>/<span class="hljs-number">2</span> = truncate(<span class="hljs-number">7.5</span>) = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：a = 7, b = <span class="hljs-string">-3</span><br>输出：<span class="hljs-string">-2</span><br>解释：7/<span class="hljs-string">-3</span> = truncate(<span class="hljs-string">-2</span>.33333..) = <span class="hljs-string">-2</span><br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">a</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">b</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">a</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">b</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><span class="math inline">\(-2^{31}&lt;=a, b&lt;=2^{31}-1\)</span></li><li><span class="math inline">\(b != 0\)</span></li></ul><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/xoh6Oh 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路">解题思路</h1><blockquote><ol type="1"><li>用减法来代替除法；</li><li>先将被除数和除数都看成负数，最后再修改结果的正负值；</li><li>考虑溢出情况。</li></ol></blockquote><blockquote><p><strong>薄弱知识点：</strong></p><ol type="1"><li>C++ 中 <code>INT_MIN</code> 和 <code>INT_MAX</code> 可直接得到整型的最小值和最大值；</li><li>灵活使用三目运算符；</li><li>32位有符号数，最大整数为<span class="math inline">\(2^{32}-1\)</span>，最小整数为<span class="math inline">\(-2^{32}\)</span>。</li><li>为什么 <code>unsigned</code> 改成 <code>int</code> 就会超时？ <code>unsigned</code> 的处理速度更快？<label style="color:red">（没搞懂）</label></li></ol></blockquote><h1 id="代码">代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0x80000000</span> &amp;&amp; b == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> INT_MAX;<br>        <br>        <span class="hljs-keyword">int</span> flag = (a &gt; <span class="hljs-number">0</span>) ^ (b &gt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">unsigned</span> ret = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>)  a = -a;<br>        <span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">0</span>)  b = -b;<br><br>        <span class="hljs-keyword">while</span> (a &lt;= b)<br>        &#123;<br>            <span class="hljs-keyword">int</span> value = b;<br>            <span class="hljs-keyword">unsigned</span> quotient = <span class="hljs-number">1</span>;   <span class="hljs-comment">//商</span><br>            <span class="hljs-keyword">while</span> (value &gt;= <span class="hljs-number">0xc0000000</span> &amp;&amp; a &lt;= (value + value)) <br>            &#123;<br>                quotient += quotient;<br>                value += value;<br>            &#125;<br>            ret += quotient;<br>            a -= value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag==<span class="hljs-number">1</span> ? -ret : ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>整数</tag>
      
      <tag>C++</tag>
      
      <tag>简单</tag>
      
      <tag>位运算</tag>
      
      <tag>需要重做</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
